Student Computing User Boot Assistant

	This is a project by Stanford's Sudent Computing Department to come up with a replacement for Mike Bombich's "BootPicker" that is more tailored to the departments needs. Those specific needs are:

Have the "Boot into Windows" window not cover up the loginwindow.
Allow a server to override the preferences and turn off one OS or the other (hiding the window, or causing the computer to reboot into Windows).
Better match the pGinga system we are creating on Windows

	This project will wind up consisting of three parts. This code on the Macintosh side, a matching bit of code on the Windows side, and a EFI boot layer that will arbitrate between them. The latter two are in-progress.

Features

	•	Checks in with a server to see if the OS chooser window should be visible
	•	Configurable with a plist (edu.stanford.stucomp.bootpicker.plist)
	•	Includes a preference manifest file for easy administration with Workgroup Manager.
	•	A delay between the first click and the actual reboot to allow the user to cancel.
	•	Holding down the shift key while clicking on the button avoids the delay.
	•	Automatic resizing of the window to match the loginwindow (with some manual settings)
	•	Resizing of the window to fit the screen

Server Configuration

	When configured to do so the program looks to a file served by a web server to tell it what to do. The format of the web page is very simple:

WindowsAllowed=False
MacOSXAllowed=True

	The order of the lines does not matter, and other things can be in the file, but these two lines have to be by themselves. There also cannot be any white-space on the line.

Local Configuration

	Local configuration is all done in a plist file:

/Library/Preferences/edu.stanford.stucomp.SCUBA.plist

	All of the following configurations live at the top-level of the file (this may change):

	•	justTesting (default False) - When set to True this causes the window to always display, and turns off the ability to reboot.
	•	serverAddress - The complete URL for the server to check. If this is empty it will not check in, but the Window will still be displayed.
	•	ignoreServer - If this is set, then the server will be ignored. The window will be displayed.
	•	secondsBetweenChecks (default 300) - The number of seconds between checks with the server.
	•	logHearbeat (default False) - When enabled the program will send a “hearbeat” message to the System Log every time it checks in with the server. Useful in debugging.
	•	windowsTargetVolume (default /dev/disk0s3) - The disk slice that Windows is on. This will be checked to make sure that it looks like a Windows volume, but this program cannot be certain that it is really bootable.
	•	imageNameOrLocation (default WindowsLogoBoot) - The name or full path to an image to use in the main window. If you are using the path, then it must be a full path (not relative), and must include the file extension. If it is a name, then it must be in the Resources folder of the application, and the name should not have the file extension attached.
	•	topMessage and bottomMessage - The messages displayed on the main window.
	•	popupTitle and popupMessage - The text displayed on the alert sheet when the icon is clicked.
	•	popupSeconds - The number of seconds between the time the icon is clicked, and the automatic reboot. Note that it does not display a count-down.
	•	loginwindowTextLines - The number of lines of text that are shown at the loginwindow. If there are no lines, this is automatically detected. At some point in the future this might be fully automatic.
	•	loginwindowUsersDisplayed - The number of users displayed at the loginwindow. At some point in the future this might be fully automatic.

Miscellaneous Notes

	•	The application is launched by a launchd plist. This is required to be in /Library/LaunchAgents with the proper permissions.
	•	The preference file ships in “justTesting” mode. This will not reboot the computer.
	•	The included .packproj file is a Iceberg file. Install Iceberg and this will help you create the appropriate .mpkg to install the program on client computers (hint: it will put its completed files in the build directory)

Future Directions

	The project is not complete, and there are a few things we need to add:

	•	Finish the Windows-side component to match this MacOS X one.
	•	Finish an EFI layer that will be used to decide what OS to boot to initially (this will also do the work of helping the Windows side set the boot OS)
	•	Reset the “boot to windows” code to use this system.
	•	Create code that would do a better job of checking the partitions for bootable OSs.

	There are some additional things that would not be used at Stanford StuComp, but might eventually make it in. I can’t make any promises about these:

	•	Allow for two separate windows that would boot into two OSs.

Author
	Karl Kuehn - Mac Image Developer - Stanford University - Student Computing
	larkost@stanford.edu
